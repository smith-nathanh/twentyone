# source: https://pytorch.org/tutorials/intermediate/reinforcement_q_learning.html

import math
import random
from collections import namedtuple, deque
import environment 
import numpy as np

import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F


# if GPU is to be used
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

Transition = namedtuple('Transition',
                        ('state', 'action', 'next_state', 'reward'))


class ReplayMemory(object):

    def __init__(self, capacity):
        self.memory = deque([], maxlen=capacity)

    def push(self, *args):
        """Save a transition"""
        self.memory.append(Transition(*args))

    def sample(self, batch_size):
        return random.sample(self.memory, batch_size)

    def __len__(self):
        return len(self.memory)


class DQN(nn.Module):

    def __init__(self, n_observations, n_actions):
        super(DQN, self).__init__()
        self.layer1 = nn.Linear(n_observations, 128)
        self.layer2 = nn.Linear(128, 128)
        self.layer3 = nn.Linear(128, n_actions)

    # Called with either one element to determine next action, or a batch
    # during optimization. Returns tensor([[left0exp,right0exp]...]).
    def forward(self, x):
        x = F.relu(self.layer1(x))
        x = F.relu(self.layer2(x))
        return self.layer3(x)


def get_agent_hand(state):
    """
    Convert state to player hand.
    :param state: the game state
    :return: the player hand, and True if there is a usable ace
    """
    return state % 10 + 1, int(state - 100 >= 0)


def get_dealer_hand(state):
    """
    Convert state to dealer face-up card.
    :param state: the game state
    :return: the dealer face-up card
    """
    return ((state - state % 10) / 10) % 10 + 1


# BATCH_SIZE is the number of transitions sampled from the replay buffer
# GAMMA is the discount factor as mentioned in the previous section
# EPS_START is the starting value of epsilon
# EPS_END is the final value of epsilon
# EPS_DECAY controls the rate of exponential decay of epsilon, higher means a slower decay
# TAU is the update rate of the target network
# LR is the learning rate of the ``AdamW`` optimizer
BATCH_SIZE = 128
GAMMA = 0.99
EPS_START = 0.9
EPS_END = 0.05
EPS_DECAY = 1000
TAU = 0.005
LR = 1e-4

env = environment.Blackjack()
n_actions = 2
n_observations = 14

policy_net = DQN(n_observations, n_actions).to(device)
target_net = DQN(n_observations, n_actions).to(device)
target_net.load_state_dict(policy_net.state_dict())

optimizer = optim.AdamW(policy_net.parameters(), lr=LR, amsgrad=True)
memory = ReplayMemory(10000)


steps_done = 0


def select_action(state):
    global steps_done
    sample = random.random()
    eps_threshold = EPS_END + (EPS_START - EPS_END) * \
        math.exp(-1. * steps_done / EPS_DECAY)
    steps_done += 1
    if sample > eps_threshold:
        with torch.no_grad():
            # t.max(1) will return the largest column value of each row.
            # second column on max result is index of where max element was
            # found, so we pick action with the larger expected reward.
            return policy_net(state).max(1).indices.view(1, 1)
    else:
        return torch.tensor([[random.randint(0,1)]], device=device, dtype=torch.long)


episode_durations = []


def optimize_model():
    if len(memory) < BATCH_SIZE:
        return
    transitions = memory.sample(BATCH_SIZE)
    # Transpose the batch (see https://stackoverflow.com/a/19343/3343043 for
    # detailed explanation). This converts batch-array of Transitions
    # to Transition of batch-arrays.
    batch = Transition(*zip(*transitions))

    # Compute a mask of non-final states and concatenate the batch elements
    # (a final state would've been the one after which simulation ended)
    non_final_mask = torch.tensor(tuple(map(lambda s: s is not None,
                                          batch.next_state)), device=device, dtype=torch.bool)
    non_final_next_states = torch.cat([s for s in batch.next_state
                                                if s is not None])
    state_batch = torch.cat(batch.state)
    action_batch = torch.cat(batch.action)
    reward_batch = torch.cat(batch.reward)

    # Compute Q(s_t, a) - the model computes Q(s_t), then we select the
    # columns of actions taken. These are the actions which would've been taken
    # for each batch state according to policy_net
    state_action_values = policy_net(state_batch).gather(1, action_batch)

    # Compute V(s_{t+1}) for all next states.
    # Expected values of actions for non_final_next_states are computed based
    # on the "older" target_net; selecting their best reward with max(1).values
    # This is merged based on the mask, such that we'll have either the expected
    # state value or 0 in case the state was final.
    next_state_values = torch.zeros(BATCH_SIZE, device=device)
    with torch.no_grad():
        next_state_values[non_final_mask] = target_net(non_final_next_states).max(1).values
    # Compute the expected Q values
    expected_state_action_values = (next_state_values * GAMMA) + reward_batch

    # Compute Huber loss
    criterion = nn.SmoothL1Loss()
    loss = criterion(state_action_values, expected_state_action_values.unsqueeze(1))

    # Optimize the model
    optimizer.zero_grad()
    loss.backward()
    # In-place gradient clipping
    torch.nn.utils.clip_grad_value_(policy_net.parameters(), 100)
    optimizer.step()


if torch.cuda.is_available():
    num_episodes = 600
else:
    num_episodes = 600 #50

total_return = 0
hand_count = 0
cur_episode = 0

while True:
    hand_count += 1
    # Initialize the environment and get its state
    deck_state = np.array(env.get_card_state(), dtype=float)
    deck_state /= 96
    agent_hand = 0
    agent_ace = 0
    dealer_hand = 0
    betting_phase = 1
    starting_state = np.concatenate((deck_state, [agent_hand], [agent_ace], [dealer_hand], [betting_phase]))
    starting_state = torch.tensor(starting_state, dtype=torch.float32, device=device).unsqueeze(0)
    action = select_action(starting_state)

    bet_size = 1
    if action == 1:
        bet_size = 10

    hand_state, _ = env.reset()
    reward = 0
    opening_action = False
    if hand_state == 203:
        reward = 3 * bet_size
        total_return += reward
        reward = torch.tensor([reward], device=device)
        memory.push(starting_state, action, None, reward)
        target_net_state_dict = target_net.state_dict()
        policy_net_state_dict = policy_net.state_dict()
        for key in policy_net_state_dict:
            target_net_state_dict[key] = policy_net_state_dict[key]*TAU + target_net_state_dict[key]*(1-TAU)
        target_net.load_state_dict(target_net_state_dict)

    opening_action = True
    agent_hand, agent_ace = get_agent_hand(hand_state)
    agent_hand /= 10
    dealer_hand = get_dealer_hand(hand_state)
    betting_phase = 0
    deck_state = np.array(env.get_card_state(), dtype=float)
    deck_state /= 96
    state = np.concatenate((deck_state, [agent_hand], [agent_ace], [dealer_hand], [betting_phase]))
    state = torch.tensor(state, dtype=torch.float32, device=device).unsqueeze(0)

    while hand_state < 200:
        if opening_action:
            opening_action = False
            reward = torch.tensor([0], device=device)
            memory.push(starting_state, action, state, reward)
            optimize_model()
            target_net_state_dict = target_net.state_dict()
            policy_net_state_dict = policy_net.state_dict()
            for key in policy_net_state_dict:
                target_net_state_dict[key] = policy_net_state_dict[key]*TAU + target_net_state_dict[key]*(1-TAU)
            target_net.load_state_dict(target_net_state_dict)

        action = select_action(state)

        hand_state, reward, _ = env.execute_action(action)
        reward *= bet_size
        total_return += reward
        reward = torch.tensor([reward], device=device)
        agent_hand, agent_ace_new = get_agent_hand(hand_state)
        agent_hand /= 10
        deck_state = np.array(env.get_card_state(), dtype=float)
        deck_state /= 96
        state_new = np.concatenate((deck_state, [agent_hand], [agent_ace_new], [dealer_hand], [betting_phase]))

        next_state = torch.tensor(state_new, dtype=torch.float32, device=device).unsqueeze(0)

        # Store the transition in memory
        memory.push(state, action, next_state, reward)

        # Move to the next state
        state = next_state

        # Perform one step of the optimization (on the policy network)
        optimize_model()

        # Soft update of the target network's weights
        # θ′ ← τ θ + (1 −τ )θ′
        target_net_state_dict = target_net.state_dict()
        policy_net_state_dict = policy_net.state_dict()
        for key in policy_net_state_dict:
            target_net_state_dict[key] = policy_net_state_dict[key]*TAU + target_net_state_dict[key]*(1-TAU)
        target_net.load_state_dict(target_net_state_dict)

    if len(env.deck.cards) < 125:
        print(cur_episode, total_return/hand_count)
        cur_episode += 1
        if cur_episode > num_episodes:
            break
        total_return = 0
        hand_count = 0
        env = environment.Blackjack()


torch.save(policy_net.state_dict(), 'dqn_model.pth')  # Saves the PyTorch model weights

print('Complete')
